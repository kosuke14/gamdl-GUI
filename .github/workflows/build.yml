name: Build

on:
  workflow_dispatch:
    inputs:
      upload_to_release:
        description: "Upload artifacts as draft release?"
        required: true
        type: boolean
        default: false

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller requests tqdm
          pip install -r requirements.txt

      - name: Prepare binary directory
        shell: bash
        run: |
          # Clean up any existing binary folder before recreating
          if [ -d "binary" ]; then
            rm -rf binary
          fi
          mkdir -p binary

      # ---------- WINDOWS ----------
      - name: Download Windows N_m3u8DL-RE
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          url=$(curl -sL https://api.github.com/repos/nilaoda/N_m3u8DL-RE/releases/latest \
            | grep -Eo 'https://[^"]*N_m3u8DL-RE_[^"]*_win-x64_[^"]*.zip' | head -n 1)
          echo "Downloading $url"
          curl -L "$url" -o re.zip
          unzip -j re.zip -d binary
          mv binary/N_m3u8DL-RE.exe binary/windows-N_m3u8DL-RE.exe

      - name: Download Windows ffmpeg
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          url=$(curl -sL https://api.github.com/repos/GyanD/codexffmpeg/releases/latest \
            | grep -Eo 'https://[^"]*ffmpeg-[^"]*-essentials_build.7z' | head -n 1)
          echo "Downloading $url"
          curl -L "$url" -o ffmpeg.7z
          7z x ffmpeg.7z -obuild
          cp build/*/bin/ffmpeg.exe binary/windows-ffmpeg.exe

      - name: Download Windows mp4decrypt
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          url="https://www.bok.net/Bento4/binaries/Bento4-SDK-1-6-0-641.x86_64-microsoft-win32.zip"
          curl -L "$url" -o bento.zip
          unzip -j bento.zip '*/bin/mp4decrypt.exe' -d binary
          mv binary/mp4decrypt.exe binary/windows-mp4decrypt.exe

      # ---------- BUILD ----------
      - name: Build with PyInstaller
        run: |
          pyinstaller main.py --onefile --noconsole --add-data "binary${{ matrix.os == 'windows-latest' && '\\\\*;binary' || ':binary' }}"

      # ---------- UPLOAD ----------
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: gamdl_gui_${{ matrix.os }}
          path: dist/*

      # ---------- OPTIONAL RELEASE ----------
      - name: Create Draft Release
        if: ${{ github.event.inputs.upload_to_release == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: build-${{ github.run_id }}
          name: "Draft Build ${{ github.run_id }}"
          draft: true
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
